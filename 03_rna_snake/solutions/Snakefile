SAMPLES = ['a','b','c','d','e']

INDEX_DIR='/home/stud0/annotations/dm6_STAR_index'
GTF='/home/stud0/annotations/ENCODE.gtf'
BED='/home/stud0/annotations/dm6_ensembl.bed'

MAP='/home/stud0/aibh_integromics/03_rna_snake/map_droso.tsv'
FQ_DIR='/home/stud0/aibh_integromics/03_rna_snake/fastq'

THREADS=1

rule all_qc:
    input: expand("sample_{sample}_fastqc.html", sample=SAMPLES)

rule fastqc:
    input: FQ_DIR+'/sample_{sample}.fastq.gz'
    output: "sample_{sample}_fastqc.html"
    shell: 
        """
            fastqc -o . {input}
            rm sample_{wildcards.sample}_fastqc.zip
        """

rule align:
    input: fastq=FQ_DIR+'/sample_{sample}.fastq.gz'
    output: "sample_{sample}_Aligned.sortedByCoord.out.bam"
    params: index=INDEX_DIR, threads=THREADS
    shell: 
        """
            STAR --readFilesCommand zcat --runThreadN {params.threads} --genomeDir {params.index} --readFilesIn {input.fastq} --outFileNamePrefix sample_{wildcards.sample}_ --outSAMtype BAM SortedByCoordinate --outBAMsortingThreadN {params.threads}
        """

rule featureCount:
    input: bam="sample_{sample}_Aligned.sortedByCoord.out.bam", gtf=GTF
    output: "sample_{sample}_counts.tsv"
    params: threads=THREADS
    shell: 
        """
            featureCounts -o {output} -T {params.threads} -t exon -g gene_name -s 0 -a {input.gtf} {input.bam}
        """

rule all_counts:
    input: expand("sample_{sample}_counts.tsv", sample=SAMPLES)
    output: counts="all_counts.tsv"
    script: "merge_counts.R"

rule extract_expressed_genes:
    input: counts="all_counts.tsv"
    output: expr_counts="expressed_genes_counts.tsv"
    script: "expressed_genes.R"

rule translate_to_flybase:
    input: counts="expressed_genes_counts.tsv", map=MAP
    output: ense_counts="expressed_genes_counts_flybase.tsv"
    script: "translate_flybase.R"

rule bed_expressed_genes:
    input: bed=BED, expr="expressed_genes_counts_flybase.tsv"
    output: ebed="expr.bed"
    run:
        genes = []
        with open(input.expr, "r") as expr:
            for line in expr:
                line = line.rstrip('\n')
                fields = line.split('\t')
                genes.append(fields[6])
        with open(output.ebed, 'w') as ebed:
            with open(input.bed, "r") as bed:
                for line in bed:
                    linen = line.rstrip('\n')
                    fields = linen.split('\t')
                    if fields[3] in genes:
                        ebed.write(line)
    
rule bai:
    input: "{whatever}.bam"
    output: "{whatever}.bam.bai"
    shell: "samtools index {input}"
    
# We need a to build the bam index for this!
rule read_distribution:
    input: bam="sample_{sample}_Aligned.sortedByCoord.out.bam", bed="expr.bed", bai="sample_{sample}_Aligned.sortedByCoord.out.bam.bai"
    output: "sample_{sample}.geneBodyCoverage.curves.pdf"
    shell: 
        """
            geneBody_coverage.py -i {input.bam} -r {input.bed} -o sample_{wildcards.sample}
        """

########### Maintenance
rule clean:
	shell: "rm -f *Log *tab *out *summary sample*tsv log.txt *counts*tsv *bam *bai *geneBodyCoverage* expr.bed expressed_genes_bash.tsv"
